@page "/login"
@using WebAss.Models
@using WebAss.ApiCommunication;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider


<h3>Sing In</h3>
<p>@Message</p>
<EditForm Model="@form" OnValidSubmit="LoginSubmit">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="email">e-mail:</label>
        <InputText id="email" class="form-control" @bind-Value="form.Email"/>
        <ValidationMessage For="@(() => form.Email)"/>
    </div>

    <div class="form-group">
        <label for="password">password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="form.Password"></InputText>
        <ValidationMessage For="@(() => form.Password)"/>
    </div>
    <button type="submit" @onclick="() => form.isLogin = true" class = "btn btn-primary">Sign In</button>
    <button type="submit" @onclick="() => form.isLogin = false" class = "btn btn-secondary">Register</button>
</EditForm>


@code {
    private string Message = "Please sing in";
    private SignInForm form = new();

     private async Task LoginSubmit()
     {
         var customAuthProvider = (CookieAuthenticationStateProvider)AuthStateProvider;
         LoginModel model = new()
         {
             Email = form.Email,
             Password = form.Password
         };
         if (form.isLogin)
         {
             if (await customAuthProvider.Login(model))
             {
                 Message = "Successfully logged in";
             }
             else
             {
                 Message = "Login failed";
             }
         }
         else
         {
             if (await customAuthProvider.Register(model))
             {
                 Message = "Registration failed";
             }
             else
             {
                 Message = "Account successfully created, please login in";
             }
         }
     }
}