@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using WebAss.ApiCommunication
@using System.Globalization
@inject NavigationManager NavigationManager
@inject TodosApi TodosApi
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Todos: </h1>
        <button class="btn btn-primary add-btn" @onclick="GoToAddNew">Add new</button>
        <div class="todo-wrapper">
            @foreach (var todo in todos)
            {
                <div class=@GetTodoCssClass(todo)>
                    <h2 class="todo-title">@todo.title</h2>
                    <p class="todo-body">@todo.body</p>
                    <p class="todo-deadline"><strong>Deadline: </strong>
                        @todo.deadline.ToString(new CultureInfo("de-DE"))</p>
                    @if (todo.is_complete)
                    {
                        <p class="todo-deadline"><strong>Complete</strong></p>
                    }
                    <button class="btn btn-primary" @onclick="() => GoToEdit(todo.id)">Edit</button>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p>To view your Tasks you need to log in</p>
        <button class="btn btn-primary" @onclick="GoToLoginPage">Login</button>
    </NotAuthorized>
</AuthorizeView>


@code{

    private List<TodoItem> todos = new();

    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CookieAuthenticationStateProvider)AuthStateProvider;
        if (await customAuthProvider.IsLoggedIn())
            await FetchTodos();
    }

    private string GetTodoCssClass(TodoItem todo)
    {
        string className = "todo-item";
        double remain = todo.deadline.Subtract(DateTime.Now).TotalMinutes;
        if (todo.is_complete)
        {
            className += " todo-item-complete";
        } else if (remain >= 0 && remain <= 60)
        {
            className += " todo-item-deadline";
        }
        return className;
    }

    private void GoToLoginPage()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void GoToAddNew()
    {
        NavigationManager.NavigateTo("/addtodo");
    }

    private void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    private async Task FetchTodos()
    {
        var returnValue = await TodosApi.GetAllTodos();
        if (returnValue is not null)
            todos = returnValue;
    }
}
